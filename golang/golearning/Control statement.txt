For
The for statement allows us to repeat a list of statements (a block) multiple times.
Go only has one that can be used in a variety of different ways

package main
import "fmt"
func main() {
 i := 1
 for i <= 10 {
 fmt.Println(i)
 i = i + 1
 }
}

If
An if statement is similar to a for statement in that it
has a condition followed by a block. If statements also
have an optional else part. If the condition evaluates
to true then the block after the condition is run, otherwise either the block is skipped or if the else block is
present that block is run.


func main() {
 for i := 1; i <= 10; i++ {
 if i % 2 == 0 {
 fmt.Println(i, "even")
 } else {
 fmt.Println(i, "odd")
 }
 }
}

else if

if i % 2 == 0 {
 // divisible by 2
} else if i % 3 == 0 {
 // divisible by 3
} else if i % 4 == 0 {
 // divisible by 4
}


SWITCH 

A switch statement starts with the keyword switch followed by an expression (in this case i) and then a series of cases. The value of the expression is compared
to the expression following each case keyword. If they
are equivalent then the statement(s) following the : is
executed. 

if i == 0 {
 fmt.Println("Zero")
} else if i == 1 {
 fmt.Println("One")
} else if i == 2 {
 fmt.Println("Two")
} else if i == 3 {
 fmt.Println("Three")
} else if i == 4 {
 fmt.Println("Four")
} else if i == 5 {
 fmt.Println("Five")
}

